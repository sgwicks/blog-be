module.exports = [
    {
        title: 'New Blog Project and Stellaris modding',
        topic: 'coding',
        blurb: 'When I first graduated from Northcoders I was full of excitement and energy, ready to start a role as a junior developer, and until I did, full of ideas for projects I wanted to work on.\n\nSix weeks later, I’m less excited and less full of energy.',
        body: "When I first graduated from Northcoders I was full of excitement and energy, ready to start a role as a junior developer, and until I did, full of ideas for projects I wanted to work on.\n\nSix weeks later, I’m less excited and less full of energy. Covid has had this effect on a lot of people, so I’m not really ashamed to admit to feeling down and disheartened, and as time has gone on my motivation and schedule have gone out the window. Over the weekend I hit a low that I haven’t hit for a few years, back when I was a freelance writer also without work or purpose.\n\nI’ve come a long way since then, and I’ve learned how to dig myself out of that hole, so here I am with spade in hand to get digging.\n\nFirstly, I’m setting myself two new schedules: a daily schedule where I know what I’m going to focus on, and so I can feel good about what I’m doing in the moment without worrying about the other things I feel I should be doing. Everything has a place and time, and with a daily schedule I can commit fully to everything when I’m supposed to and rid myself of those worries.\n\nSecondly, and more relevantly for this blog, a weekly schedule. More precisely, a weekly project. All those ideas I had when I graduated? Some of them I worked on for a while and was happy with the result, some I started on and got distracted, and plenty more just never saw the light of day. So now I’m going to give myself the time to work on them.\n\nEach week I’m going to pick a project, new or old, and commit to working on it for a week. Sometimes it’ll be something small, just to test out an idea and see how viable it is, or to learn something new. Sometimes it’ll be part of a grander design, something I can keep coming back to. Each day I’ll post about what I’m working on, the progress I’ve made and my feelings on it all. At the end of the week I’ll summarise where I am, and maybe what my plans are going forward for the project. Then over the weekend I can figure out my next week’s task (even if it’s more work on the same project) and start again on Monday.\n\n##This week’s project\n\nWith all that out of the way, here’s what I’m going to be working on this week: a mod for Paradox Game Studios’ space grand strategy game Stellaris. This represents a few different goals for me: \n\nIn the short term, it represents some feelings I have about one of the late-game paths in Stellaris. Without going into too much detail, I’ve been unhappy with a while about how genetic modification works in the game, and so I’m taking this opportunity to put a few of my own ideas into practice. In this sense, it’s mostly a bit of a thought experiment, with the longer term goal of creating a better game experience.\n\nIn the medium term, it’s a great way to start modding, making games better for myself and others, especially Paradox games, which is where I spend a lot of my time. I’m starting small, but my hope is that what I learn here will help me to mod games in future in more drastic and interesting ways, and then perhaps even move onto modding other, non-Paradox games.\n\nIn the long term it gives me the opportunity to practice being a game designer without having to write every system from scratch. Relying on an existing game allows me to have thoughts about how things work and interact without having to first build an entire game. I’d like to work in game design in future, and in particular I’d love to work for Paradox, so this is a chance to showcase what I know, what I can learn and my willingness and desire to work towards that goal.\n\n##What I’ve done so far\n\nSo I actually started this project last week, though a lot of it has been browsing the Stellaris modding wiki and the game files trying to find the relevant variables and the right language to use.\n\nSo far I’ve invented a few new habitability traits, and today’s breakthrough was ensuring that each starting race would replace their old traits with my new modifications.\n\nSince this blog is already quite long, though, I’m going to leave it here and do a deeper dive on my actual work in tomorrow’s piece, bringing you up to date on the documentation I’ve been using, my learning methods and what I’ve achieved so far. Hopefully including screenshots."
    },
    {
        title: 'Day 2: Testing & Edge Cases',
        topic: 'coding',
        blurb: "The first main task of the day was to test that everything I'd written yesterday worked the way I expected. Of course it didn't but that's what testing is for after all.",
        body: "The first main task of the day was to test that everything I'd written yesterday worked the way I expected. Of course it didn't but that's what testing is for after all.\n\nThe main gist of everything was working as expected, except that I'd forgotten to add localisation text for a lot of what I'd coded in, so all the game text just referenced my variable names. Embarrassing, but a very easy fix.\n\nWhat I really got from my tests, though, was a feel for the edge cases that I hadn't been considering, or that I knew I'd need to come back to later.\n\n## Dealing with edge cases\n\nThe first edge case was non-standard empires. My code was written on the presumption that all empires in Stellaris are created equally (i.e. all go through the same setup method) but of course, that's not true at all. Some empires skip over the rules that I'd implemented, so I needed to find out where they were created, and alter their rules separately.\n\nThe second edge case, and the one that has had me pulling my hair out all morning, was the secondary species that might exist for an empire. Although the main species is very easy to scope to, because it's a vital part of an empire, the secondary sort of floats around in the background and doesn't fully exist until the game starts (by which time I'd hope to have already altered it).\n\nI haven't actually solved this problem fully, but put together a clunky solution that works on first glance. That means more testing required. The sort of ethereal quality of secondary objects that don't fully exist until they're created (and thus can't be altered until they exist) may be more than my limited skills/tools can handle, but it's not going to stop me from trying.\n\n## DRY coding\n\nThe other use of my time today has been figuring out how to code DRY for Paradox modding purposes. Since most of what I'm doing is the same code in different places, I figured there must be a way of shortcutting it all.\n\nWithout fully understanding how the code was compiled or read, I hadn't realised that a lot of the code I was reading was already a good example of how to code DRY, but once I did, everything clicked into place, and now I can just re-use the same bits of code again and again, which will save me some headaches in future.\n\n## Scope\n\nOf course, the core thing to watch out for here is scope: I need to always be making sure that whatever I'm writing is looking at the right objects, otherwise it's just not going to work. This has already caused a few issues for me, where seemingly functional code hasn't been working because it's been looking at a planet instead of a species. When trying to use DRY code it's going to be even more important to know where my code is being called and what it's expecting to see there.\n\nOverall I'm enjoying a very different way of coding at the moment, and it's good experience for OOP which is likely something I'll end up doing a lot more of if I get my way.\n\nTomorrow is further testing, perhaps more rigorously than today, and perhaps learning to use some more useful console commands. But we'll see what problems the testing dredges up for me to solve, first."
    },
    {
        title: 'Day 3: I wondered if I could...',
        topic: 'coding',
        blurb: "...but I only just started to wonder if I should.",
        body: "...but I only just started to wonder if I should.\n\nWelcome to day 3(ish) of Stellaris modding, the day where I wonder what I'm doing, why I'm doing it and whether I should even have bothered starting.\n\nI'm being dramatic, of course, but I've hit that block I sometimes hit of wondering if I'm going about things the wrong way, and fighting the temptation to trash what I've already got and start again.\n\nSometimes that's a more useful approach, but often it's not.\n\n## Finishing the habitability modifications\n\nSo with a final few tests this morning, I concluded that my changes to habitability were working as far as I can see. I'm sure there are more edge cases I haven't worked out, but until I have a more well-rounded mod worth playing with, I'm not going to worry about those exact edge cases. I want to get something workable together (MVP, if you will), and then I can play through a few more robust test games to see which bits fall apart.\n\nSo the next step was to think about what my modifications might have broken and how to deal with that.\n\nThe main thing is that there's a technology late in Stellaris that allows you to switch your species' habitability traits around. Now that species shouldn't have those traits, that tech is redundant at best, but very possibly game breaking. So I had to go in and remove it. That was easy enough.\n\nNext I got to thinking about the reasons behind the changes I'd made, and how it would affect gameplay. And that's where I hit this stumbling block.\n\n## The limits of modding\n\nOne of the problematic parts of modding, is that you don't really have access to the full game code; just the parts of it the developers allow you to interact with. Paradox put a lot of code out there for people to play with, an incredible amount, but at the end of the day the core engine is sealed away from me, and there are some hard-coded behaviours I just can't change.\n\nIn a normal game of Stellaris, when genetically modifying a species you can swap traits in and out, as long as they don't conflict (strong vs. weak etc.), and you can potentially change habitability, but only for a certain type of planet (Desert, Ocean, Continental and so on). You can't have a preference for both Ocean **and** Continental, you can only have one. That's a hard-coded behaviour.\n\nSo, I've taken out the ability to change those planetary preferences entirely, that's fine. I've replaced those preferences with a pair of traits each, so that what was previously 'Desert Preference' is now 'Large' and 'Cold Blooded'. The idea was that this would allow for a more interesting dynamic. If you want your species to still enjoy large, open-spaced planets, but be able to handle chillier climates, you could remove Cold Blooded without removing Large.\n\nThe problem I encounter is that there's no way for me to set a rule that requires you to have a size, in the same way that you used to require a planetary preference. You could remove 'Large', but not add 'Medium' or 'Small', becoming a sizeless, amorphous blob?\n\nPractically, this would be a poor gameplay move, but having it be possible means that: a) it's possible, when it shouldn't be; b) if the AI can use it, it **will** use it badly.\n\nSo the other option I have is to make these traits fixed, non-moddable. But then, why have them be separate to planetary preference in the first place? If a species that is Large and Cold Blooded is always going to be that way, why change the planetary preference mechanics that already do that?\n\nThe answer really is that I wanted to see if I could, and how I could, which has been a great learning experience. But it does raise the question of where I go next, and if the exercise can be salvaged into an interesting mod.\n\nI have a few ideas brewing in the back of my mind, but they'll have to wait until tomorrow. "
    },
    {
        title: 'Day 4: Planning & Design',
        topic: 'coding',
        blurb: "Now that the first step of the Stellaris mod is out of the way, we hit upon a new 'design' element of game design: creating all the traits I want to add to the game.",
        body: "Now that the first step of the Stellaris mod is out of the way, we hit upon a new 'design' element of game design: creating all the traits I want to add to the game.\n\n## Adding new traits\n\nThe code involved in adding new traits is some of the simplest stuff that I'm going to have to do for this mod. I could do it right now if I wanted, and in fact part of designing the habitability system involved doing so.\n\nBut the code is not the only thing I need to do here. I also need to know what I'm going to be adding, and that's not something that I'm going to do while sat at a PC. So this morning's work has all been pen and paper (still my preferred note-taking and planning tools), sketching out some brief ideas of what I want to add.\n\nI don't know how many traits I want to add to the game, or how similar I want them to be to what currently exists, but I have an idea of the direction I'm going, and as long as I have **something** to put into the game, the rest can be fixed later.\n\n## Balancing content\n\nThis is another distraction I keep bumping up against in every part of designing this mod. Just like layout and design distract me when building an app or website, the exact values I want to assign to each trait keep becoming sticking points.\n\nIn practice, I should know that I can change these later. I'm not going to get a perfectly designed mod first time around, and once they're implemented it'll be much easier to play around with all the pieces and start settling on what the values will actually be. But there's something of a perfectionist in me that makes it a struggle sometimes to just put in vague filler values.\n\nStill, it's all good practice. I've got a fair few traits written down, and I'm going to keep thinking about it and jotting down ideas as they come to me. The joy of this part of design is not being bound by having software open at the right time, or even sitting in front of a computer. I can do this anywhere, any time, in bits and chunks as necessary.\n\nTomorrow's going to be my last 'working' day on this project for a little while, though, so I want to use that time to finish something playable off that I can come back to at a later date and build on without worrying too much about what I left unfixed. That means in tomorrow's blog I'll hopefully have an overall summary of what the mod looks like (so far) and what still needs doing to it, future plans etc.\n\nNext week I'm going to start learning PHP, which may make for a less cohesive story structure, but will perhaps be more relatable nonetheless."
    },
    {
        title: 'Day 5: Grunt work',
        topic: 'coding',
        blurb: "So I knew that this morning's job was going to be mostly typing up pre-existing ideas, not much code or thought involved. I knew it was going to be a bit of a slog. Or, I thought I knew.",
        body: "So I knew that this morning's job was going to be mostly typing up pre-existing ideas, not much code or thought involved. I knew it was going to be a bit of a slog. Or, I thought I knew.\n\nOf course, it wasn't as simple as that. It's one thing to write down an idea and call it 'simple', it's another thing entirely to code something 'simple'. \n\nIn fairness, a lot of what I had written down was simple to code, or at least would have been if I were more familiar with the Stellaris modding language. The problem is, I don't necessarily know the names for different modifiers off the top of my head, so I end up having to do a lot of searching, and these names aren't always obvious and easy to find, if they even exist. A couple of things I wanted to add in didn't, it turns out.\n\nOn top of that, I did come across a couple of new concepts, such as the cross-creation of leader traits. Since these need to be coded differently for species pops and species leaders, there was a whole new idea I needed to learn just to add the 'long - lived' trait.\n\nAnd then because I didn't want to accidentally leave any of these without in-game text, I needed to create a name and description for each one so that I'd remember to come back and add the text later. As you can see in the attached image, this means writing even more lines in yet another file for each added trait.\n\nFinally, since I can't use my usual PC today (the home office space is being used for virtual meetings) I'm on the laptop, with no local Stellaris installation. Which means I can't just look up what's already in the game to copy from, and I can't test what I'm doing. There's been a lot of blind coding that I'll just have to test at a later date.\n\nThat said, I'm done with this week's project. I'm happy with what I've learned, and I'm certain to come back to this in my spare time, and I'll come back to more in-depth work for a future weekly project. But I'm done for now.\n\n# What I've learned\n\nFirstly, what I've learned is that learning a new language is fun. I mean, I already knew that, but this is actually the first time since Northcoders that I've ventured into something that isn't Javascript. Although the Paradox modding language may not be an official tech language (I don't really know the definition for what constitutes a 'language' in that sense) it was definitely a different way of working with new variables and layouts, and it was enjoyable to learn the ins and outs all by myself.\n\nI've learned that modding is not necessarily difficult, as long as you actually get on and do it. I spend too much of my time thinking about what a mod should have in it, when I should perhaps spend more time doing and less time prevaricating.\n\nEqually I've learned that planning is as important as doing. You can't do just one or the other: working with no plan is aimless and likely to end up going nowhere. But planning with no practical experience is similarly worthless, since you don't know the tools you're working with, the limits and the potential. And of course, our best ideas come when we're working on something and inspiration for further improvements strikes.\n\n# What's next\n\nIn yesterday's post, I mentioned that I was going to start learning PHP next week, and that's still on the cards. However, more important is transferring (or cross posting) this blog to my own portfolio site, where I can share it more easily and have more control over the content.\n\nSo next week's project is going to be setting up a blog on my portfolio site, which can function as a blog and not just a series of pages I have to code up. Over the weekend or on Monday I'm going to look into exactly what that entails, and come back with something like a plan."
    },
    {
        title: 'Week 2, Day 1: Building a database & more',
        topic: 'coding',
        blurb: "I considered looking into CMS add-ons for my existing portfolio site so that I could migrate this blog over there, but then it hit me: this is a perfect opportunity just to build my own blogging backend and work on my (slightly rusty) backend skills a bit more. So I started this week out with a plan to build a database and API to post my own blogs to my website.\n\nHopefully I'm not in over my head.",
        body: "I considered looking into CMS add-ons for my existing portfolio site so that I could migrate this blog over there, but then it hit me: this is a perfect opportunity just to build my own blogging backend and work on my (slightly rusty) backend skills a bit more. So I started this week out with a plan to build a database and API to post my own blogs to my website.\n\nHopefully I'm not in over my head.\n\n## The Plan\n\nI started off by creating a brief plan of what my API was going to look like. Foolishly, since it turned out I should probably have focused first on what my database was going to look like before worrying about the API endpoints.\n\nThis is why I need more practice.\n\nThe plan is pretty simple anyway, for now. This is only a week long project, and I generally only spend ~3 hours on coding a day, so I'm not trying anything ambitious off the bat. I just want something that will take my text and allow me to post it to my site in a blog-reader format.\n\nFor now it's just a two table SQL database: one table for articles, and one table for topics. The second isn't even strictly necessary, but I may expand the scope at some point, and anyway it should make it more easily browsable.\n\nThe endpoints are going to be similarly simple:\n- GET /topics\n- GET /articles\n- GET /articles/:article_id\n- POST /articles\n- DELETE /articles/:article_id\n\n## The dreaded DELETE\n\nAnd of course, as soon as I wrote DELETE, my mind exploded. I forgot that I'm going to need some authentication for this whole thing, so not just anyone can come in and start deleting my blogs, or posting random stuff to it on a whim.\n\nI can't remember if there was much in the way of authentication on the test project I did in Northcoders, but since it was only a portfolio piece I wasn't too worried at the time. I don't think we created any endpoints that could even be used maliciously.\n\nSo this is going to be a fun experience in learning about authentication. It's only a personal (though professional) blog, so I'm not super-duper worried, but it's definitely something to concern myself with, especially as I make it so public.\n\n## Copying and pasting\n\nI only started setting up the database today, but so far it feels like a lot of what I'm doing is just copying what I've done before, and it's taking me a little effort to accept that. Logically it's the most efficient way to do this: no need to re-invent the wheel after all. But it also feels like cheating, like I'm not teaching myself anything or showing new skills.\n\nI can justify it to myself in any number of ways: revising old techniques that I've forgotten, practicing those techniques, using them for a more practical purpose; but ultimately, it's something I just need to get over. It's not cheating to work in the most efficient way possible, and it's not even plagiarism if I'm copying my own work.\n\nAnyway, those are just a few of my random thoughts starting this new blog project. Hopefully by the end of the week I'll be able to link people to my own site, or if not I'll have most of it done to finish next week."
    }
]